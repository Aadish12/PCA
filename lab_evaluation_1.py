# -*- coding: utf-8 -*-
"""lab_evaluation_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZAY4Ci7AeIi7BmfEdTodVLCqMHgVPqwa
"""

################################################################################
###############                  LAB EVALUATION                  ###############
############### Topic: A program on principle component analysis ###############
############### Submitted To: Karamjeet Sir                      ###############
############### Submitted By: Aadish Mehta                       ###############
################################################################################

import numpy as np                                                              #Importing the essential libraries
from sklearn import datasets
from sklearn.preprocessing import scale   
from sklearn import decomposition         
import pandas as pd 
import plotly.express as px

################################################################################

flower = datasets.load_iris()                                                   #Loading the Dataset which consist of 150 flowers details
print('The different features of the flower are')
print(flower.feature_names)                                                     #Printing the names of features
print(' ')
print('The different colors of flower are')
print(flower.target_names)                                                      #Printing different colors of flower

X = flower.data                         
Y = flower.target

################################################################################

X = scale(X)                                                                    #Scalling the data of flower
pca = decomposition.PCA(n_components=3)                     
pca.fit(X)                                                                      #Making three divisions of the flower dataset.
divisions = pca.transform(X)                

divisions_table = pd.DataFrame(divisions, columns=['PC1', 'PC2', 'PC3'])        #Converting the array into table
print(divisions_table)

Y_label = []                                                                    #Assigning colors to the flowers based on the number
for i in Y:
  if i == 0:
    Y_label.append('Setosa')
  elif i == 1:
    Y_label.append('Versicolor')
  else:
    Y_label.append('Virginica')
color = pd.DataFrame(Y_label, columns=['color'])

divisions_table_1 = pd.concat([divisions_table, color], axis=1)                 #Combining the two tables.
print(divisions_table_1)

variance = pca.explained_variance_ratio_                                        #Finding the variance of each component
print(variance)                                                  

################################################################################

pc_table = pd.DataFrame(['PC1', 'PC2', 'PC3'], columns=['PC'])                  #Converting the array to table
variance_table = pd.DataFrame(variance, columns=['Variance'])

variance_table_1 = pd.concat([pc_table,variance_table], axis=1)                 #Combining two tables
print(variance_table_1)                                                                                       

fig = px.bar(variance_table_1, x='PC', y='Variance', text='Variance', width=800)    
fig.update_traces(texttemplate='%{text:.3f}', textposition='outside')           #Plotting the bar graph of variance
fig.show()

################################################################################

fig = px.scatter_3d(divisions_table_1, x='PC1', y='PC2', z='PC3',color='color')         #Plotting the 3-D scatter plot
fig.show()